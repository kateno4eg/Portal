from django.db import models
from django.contrib.auth.models import User

# Создать двух пользователей (с помощью метода User.objects.create_user)
user1 = User.objects.create_user('name1')
user2 = User.objects.create_user('name2')
User.objects.all()

# Создать два объекта модели Author, связанные с пользователями
from news.models import Author,Category,Post,Comment
Author.objects.create(user=user1)
Author.objects.create(user=user2)

# Добавить 4 категории в модель Category

category1 = Category.objects.create(category_name='Главное')
category2 = Category.objects.create(category_name='Наука')
category3 = Category.objects.create(category_name='Здоровье')
category4 = Category.objects.create(category_name='Технологии')

# Добавить 2 статьи и 1 новость.

post1 = Post.objects.create(author=Author.objects.get(user=User.objects.get(username='name1')), post_type='NE', title='title 1', article_text='text 1')
post2 = Post.objects.create(author=Author.objects.get(user=User.objects.get(username='name2')), post_type='AR', title='title 2', article_text='text 2')
post3 = Post.objects.create(author=Author.objects.get(user=User.objects.get(username='name2')), post_type='AR', title='title 3', article_text='text 3')

# Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий)

post1.category.add(category1,category2)
post2.category.add(category3)

# Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий)

Comment.objects.create(user=User.objects.get(username='name1'), post=Post.objects.get(id=1), comment_text='any text')
Comment.objects.create(user=User.objects.get(username='name2'), post=Post.objects.get(id=2), comment_text='no comments')
Comment.objects.create(user=User.objects.get(username='name1'), post=Post.objects.get(id=3), comment_text='some text')
Comment.objects.create(user=User.objects.get(username='name2'), post=Post.objects.get(id=1), comment_text='nothing to say')

# Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов

Post.objects.get(id=1).like()
Post.objects.get(id=2).like()
Post.objects.get(id=3).like()
Post.objects.get(id=1).dislike()
Post.objects.get(id=1).dislike()
Post.objects.get(id=1).like()
Post.objects.get(id=2).like()
Post.objects.get(id=3).like()
Post.objects.get(id=3).like()
Post.objects.get(id=2).like()

Comment.objects.get(id=3).like()
Comment.objects.get(id=4).like()
Comment.objects.get(id=5).dislike()
Comment.objects.get(id=6).like()
Comment.objects.get(id=7).like()

# Обновить рейтинги пользователей

Author.objects.get(user=User.objects.get(username='name1')).update_rating()
Author.objects.get(user=User.objects.get(username='name2')).update_rating()

# Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта)

Author.objects.all().order_by('-author_rating').values('user', 'author_rating')[0]

# Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье

Post.objects.all().order_by('-post_rating').values('post_created_on', 'author_id__user__username', 'post_rating', 'title')[0]
best = Post.objects.get(pk=Post.objects.all().order_by('-post_rating').values('id')[0]['id'])
best.preview()

# Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье

best.comment_set.all().values('comment_created_on', 'user_id__username', 'comment_rating', 'comment_text')